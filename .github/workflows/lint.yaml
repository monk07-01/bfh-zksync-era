name: Lint

on:
  pull_request:
  merge_group:


#concurrency:
#  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
#  cancel-in-progress: true

defaults:
  run:
    shell: 'bash -ex {0}'


jobs:

#  # READY
#  unit-tests:
#    runs-on: matterlabs-ci-runner-highmem-long
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'
#
#      - name: Build contracts
#        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize
#
#      - name: Start reth
#        run: docker-compose up -d --wait reth
#
#      - name: Rust unit tests
#        run: zkstack dev test rust
#
#      - name: Run benchmarks
#        working-directory: core
#        run: cargo test --package vm-benchmark --bench oneshot --bench batch
#
#      - name: Show sccache stats
#        run: sccache --show-stats


  load-test:
    runs-on: matterlabs-ci-runner-high-performance
    strategy:
      fail-fast: false
      matrix:
        vm_mode:
          - "old"
          - "new"
    env:
      EXPECTED_TX_COUNT: ${{ matrix.vm_mode == 'new' && 30000 || 16000 }}
      ACCOUNTS_AMOUNT: 100
      MAX_INFLIGHT_TXS: 10
      SYNC_API_REQUESTS_LIMIT: 15
      FAIL_FAST: true
      SERVER_LOG: server.log
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Setup runner
        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
        with:
          workspace: 'core'

      - name: Build contracts
        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize

      - name: Start services
        run: docker compose up --wait

      - name: Create legacy chain
        run: |
          zkstack chain create \
            --chain-name legacy \
            --chain-id sequential \
            --prover-mode no-proofs \
            --wallet-creation localhost \
            --l1-batch-commit-data-generator-mode rollup \
            --base-token-address 0x0000000000000000000000000000000000000001 \
            --base-token-price-nominator 1 \
            --base-token-price-denominator 1 \
            --set-as-default false \
            --ignore-prerequisites \
            --legacy-bridge \
            --evm-emulator false

      - name: Init ecosystem
        run: |
          zkstack ecosystem init \
            --ignore-prerequisites \
            --dev --skip-contract-compilation-override=true \
            --support-l2-legacy-shared-bridge-test=true --verbose

      - name: Update config
        run: |
          zkstack dev config-writer \
            --ignore-prerequisites \
            --path ${{ format('etc/env/file_based/overrides/tests/loadtest-{0}.yaml', matrix.vm_mode) }} \
            --chain legacy

      - name: Run server
        run: |
          zkstack server \
            --ignore-prerequisites --uring --chain=legacy \
            --components api,tree,eth,state_keeper,housekeeper,commitment_generator,vm_runner_protective_reads \
            &>${SERVER_LOG} &

      - name: Wait for server to start
        run: |
          zkstack server wait --chain=legacy \
            --timeout 300 --poll-interval 1000

      - name: Perform load test
        run: zkstack dev test loadtest -v --chain=legacy

      - name: Show server logs
        if: failure()
        run: cat ${SERVER_LOG}

#  integration-tests:
#    runs-on: [ matterlabs-ci-runner-ultra-performance ]
#    env:
#      RUN_CONTRACT_VERIFICATION_TEST: true
#    strategy:
#      # ----------------------------------------------
#      # Note, that while the contracts do support gateway chain
#      # in reality it won't exist for quite some time and so
#      # we will test both cases here
#      # ----------------------------------------------
#      matrix:
#        use_gateway_chain: [ "WITH_GATEWAY", "WITHOUT_GATEWAY" ]
#      # In some cases it's useful to continue one job even if another fails.
#      fail-fast: false
#    steps:
#      - uses: actions/checkout@v4 # v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'
#
#      - name: Start services
#        run: docker compose up --wait
#
#      - name: Create log directories
#        run: |
#          SERVER_LOGS_DIR=logs/server
#          INTEGRATION_TESTS_LOGS_DIR=logs/integration_tests
#          INTEGRATION_TESTS_EN_LOGS_DIR=logs/integration_tests/en
#          SNAPSHOT_RECOVERY_LOGS_DIR=logs/snapshot_recovery/
#          GENESIS_RECOVERY_LOGS_DIR=logs/genesis_recovery/
#          EXTERNAL_NODE_LOGS_DIR=logs/external_node
#          FEES_LOGS_DIR=logs/fees
#          REVERT_LOGS_DIR=logs/revert
#
#          mkdir -p $SERVER_LOGS_DIR
#          mkdir -p $INTEGRATION_TESTS_LOGS_DIR
#          mkdir -p $INTEGRATION_TESTS_EN_LOGS_DIR
#          mkdir -p $SNAPSHOT_RECOVERY_LOGS_DIR
#          mkdir -p $GENESIS_RECOVERY_LOGS_DIR
#          mkdir -p $EXTERNAL_NODE_LOGS_DIR
#          mkdir -p $FEES_LOGS_DIR
#          mkdir -p $REVERT_LOGS_DIR
#
#          echo "SERVER_LOGS_DIR=$SERVER_LOGS_DIR" >> $GITHUB_ENV
#          echo "INTEGRATION_TESTS_LOGS_DIR=$INTEGRATION_TESTS_LOGS_DIR" >> $GITHUB_ENV
#          echo "INTEGRATION_TESTS_EN_LOGS_DIR=$INTEGRATION_TESTS_EN_LOGS_DIR" >> $GITHUB_ENV
#          echo "SNAPSHOT_RECOVERY_LOGS_DIR=$SNAPSHOT_RECOVERY_LOGS_DIR" >> $GITHUB_ENV
#          echo "GENESIS_RECOVERY_LOGS_DIR=$GENESIS_RECOVERY_LOGS_DIR" >> $GITHUB_ENV
#          echo "EXTERNAL_NODE_LOGS_DIR=$EXTERNAL_NODE_LOGS_DIR" >> $GITHUB_ENV
#          echo "FEES_LOGS_DIR=$FEES_LOGS_DIR" >> $GITHUB_ENV
#          echo "REVERT_LOGS_DIR=$REVERT_LOGS_DIR" >> $GITHUB_ENV
#
#      - name: Initialize ecosystem
#        run: |
#          ci_run zkstack ecosystem init --skip-contract-compilation-override \
#          --deploy-paymaster --deploy-erc20 \
#          --deploy-ecosystem --l1-rpc-url=http://localhost:8545 \
#          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --server-db-name=zksync_server_localhost_era \
#          --ignore-prerequisites --verbose \
#          --observability=false
#
#      - name: Read Custom Token address and set as environment variable
#        run: |
#          CUSTOM_TOKEN_ADDRESS=$(awk -F": " '/tokens:/ {found_tokens=1} found_tokens && /DAI:/ {found_dai=1} found_dai && /address:/ {print $2; exit}' ./configs/erc20.yaml)
#          echo "CUSTOM_TOKEN_ADDRESS=$CUSTOM_TOKEN_ADDRESS" >> "${GITHUB_ENV}"
#
#      - name: Create and initialize Validium chain
#        run: |
#          zkstack chain create \
#          --chain-name validium \
#          --chain-id sequential \
#          --prover-mode no-proofs \
#          --wallet-creation localhost \
#          --l1-batch-commit-data-generator-mode validium \
#          --base-token-address 0x0000000000000000000000000000000000000001 \
#          --base-token-price-nominator 1 \
#          --base-token-price-denominator 1 \
#          --set-as-default false \
#          --ignore-prerequisites \
#          --evm-emulator false
#
#          zkstack chain init \
#          --deploy-paymaster \
#          --l1-rpc-url=http://localhost:8545 \
#          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --server-db-name=zksync_server_localhost_validium \
#          --chain validium \
#          --validium-type no-da
#
#      - name: Create and initialize chain with Custom Token
#        run: |
#          zkstack chain create \
#          --chain-name custom_token \
#          --chain-id sequential \
#          --prover-mode no-proofs \
#          --wallet-creation localhost \
#          --l1-batch-commit-data-generator-mode rollup \
#          --base-token-address ${{ env.CUSTOM_TOKEN_ADDRESS }} \
#          --base-token-price-nominator 314 \
#          --base-token-price-denominator 1000 \
#          --set-as-default false \
#          --ignore-prerequisites \
#          --evm-emulator false
#
#          zkstack chain init \
#          --deploy-paymaster \
#          --l1-rpc-url=http://localhost:8545 \
#          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --server-db-name=zksync_server_localhost_custom_token \
#          --chain custom_token \
#          --validium-type no-da
#
#      - name: Create and register chain with transactions signed "offline"
#        run: |
#          zkstack chain create \
#          --chain-name offline_chain \
#          --chain-id sequential \
#          --prover-mode no-proofs \
#          --wallet-creation localhost \
#          --l1-batch-commit-data-generator-mode rollup \
#          --base-token-address 0x0000000000000000000000000000000000000001 \
#          --base-token-price-nominator 1 \
#          --base-token-price-denominator 1 \
#          --set-as-default false \
#          --ignore-prerequisites \
#          --evm-emulator false
#
#          zkstack chain build-transactions --chain offline_chain --l1-rpc-url http://127.0.0.1:8545
#
#          governor_pk=$(awk '/governor:/ {flag=1} flag && /private_key:/ {print $2; exit}' ./configs/wallets.yaml)
#
#          zkstack dev send-transactions \
#          --file ./transactions/chain/offline_chain/register-zk-chain-txns.json \
#          --l1-rpc-url http://127.0.0.1:8545 \
#          --private-key $governor_pk
#
#          bridge_hub=$(awk '/bridgehub_proxy_addr/ {print $2}' ./configs/contracts.yaml)
#          chain_id=$(awk '/chain_id:/ {print $2}' ./chains/offline_chain/ZkStack.yaml)
#
#          hyperchain_output=$(cast call $bridge_hub "getHyperchain(uint256)" $chain_id)
#
#          if [[ $hyperchain_output == 0x* && ${#hyperchain_output} -eq 66 ]]; then
#              echo "Chain successfully registered: $hyperchain_output"
#          else
#              echo "Failed to register chain: $hyperchain_output"
#              exit 1
#          fi
#
#      - name: Create and initialize Consensus chain
#        run: |
#          zkstack chain create \
#          --chain-name consensus \
#          --chain-id sequential \
#          --prover-mode no-proofs \
#          --wallet-creation localhost \
#          --l1-batch-commit-data-generator-mode validium \
#          --base-token-address ${{ env.CUSTOM_TOKEN_ADDRESS }} \
#          --base-token-price-nominator 314 \
#          --base-token-price-denominator 1000 \
#          --set-as-default false \
#          --ignore-prerequisites \
#          --evm-emulator false
#
#          zkstack chain init \
#          --deploy-paymaster \
#          --l1-rpc-url=http://localhost:8545 \
#          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --server-db-name=zksync_server_localhost_consensus \
#          --chain consensus \
#          --validium-type no-da
#
#      - name: Export chain list to environment variable
#        run: |
#          CHAINS="era,validium,custom_token,consensus"
#          echo "CHAINS=$CHAINS" >> $GITHUB_ENV
#
#      # ----------------------------------------------------------------
#      #  Only create/initialize the gateway chain *if* use_gateway_chain=WITH_GATEWAY
#      # ----------------------------------------------------------------
#      - name: Initialize gateway chain
#        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
#        run: |
#          zkstack chain create \
#          --chain-name gateway \
#          --chain-id 505 \
#          --prover-mode no-proofs \
#          --wallet-creation localhost \
#          --l1-batch-commit-data-generator-mode rollup \
#          --base-token-address 0x0000000000000000000000000000000000000001 \
#          --base-token-price-nominator 1 \
#          --base-token-price-denominator 1 \
#          --set-as-default false \
#          --ignore-prerequisites \
#          --evm-emulator false
#
#          zkstack chain init \
#          --deploy-paymaster \
#          --l1-rpc-url=http://localhost:8545 \
#          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --server-db-name=zksync_server_localhost_gateway \
#          --chain gateway \
#          --validium-type no-da
#
#          zkstack chain convert-to-gateway --chain gateway --ignore-prerequisites
#
#      - name: Run gateway
#        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
#        run: |
#          zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
#          zkstack server wait --ignore-prerequisites --verbose --chain gateway
#
#      - name: Migrate chains to gateway
#        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
#        run: |
#          zkstack chain migrate-to-gateway --chain era --gateway-chain-name gateway
#          zkstack chain migrate-to-gateway --chain validium --gateway-chain-name gateway
#          zkstack chain migrate-to-gateway --chain custom_token --gateway-chain-name gateway
#          zkstack chain migrate-to-gateway --chain consensus --gateway-chain-name gateway
#
#      - name: Migrate back era
#        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
#        run: |
#          zkstack chain migrate-from-gateway --chain era --gateway-chain-name gateway
#
#      - name: Migrate to gateway again
#        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
#        run: |
#          zkstack chain migrate-to-gateway --chain era --gateway-chain-name gateway
#
#      - name: Build test dependencies
#        run: zkstack dev test build
#
#      - name: Build tested binaries
#        run: |
#          zkstack server build
#          zkstack external-node build
#          zkstack contract-verifier build
#
#      - name: Initialize Contract verifier
#        run: |
#          zkstack contract-verifier init --zksolc-version=v1.5.10 --zkvyper-version=v1.5.4 --solc-version=0.8.26 --vyper-version=v0.3.10 --era-vm-solc-version=0.8.26-1.0.1 --only --chain era
#          zkstack contract-verifier run --chain era &> ${{ env.SERVER_LOGS_DIR }}/contract-verifier-rollup.log &
#          zkstack contract-verifier wait --chain era --verbose
#
#      - name: Run servers
#        run: |
#          # Override config for part of chains to test the default config as well
#          zkstack dev config-writer --path etc/env/file_based/overrides/tests/integration.yaml --chain era
#          zkstack dev config-writer --path etc/env/file_based/overrides/tests/integration.yaml --chain validium
#
#          zkstack server --ignore-prerequisites --chain era &> ${{ env.SERVER_LOGS_DIR }}/rollup.log &
#          zkstack server --ignore-prerequisites --chain validium &> ${{ env.SERVER_LOGS_DIR }}/validium.log &
#          zkstack server --ignore-prerequisites --chain custom_token &> ${{ env.SERVER_LOGS_DIR }}/custom_token.log &
#          zkstack server --ignore-prerequisites --chain consensus \
#            --components=api,tree,eth,state_keeper,housekeeper,commitment_generator,vm_runner_protective_reads,vm_runner_bwip,vm_playground,da_dispatcher,consensus \
#            &> ${{ env.SERVER_LOGS_DIR }}/consensus.log &
#
#          zkstack server wait --ignore-prerequisites --verbose --chain era
#          zkstack server wait --ignore-prerequisites --verbose --chain validium
#          zkstack server wait --ignore-prerequisites --verbose --chain custom_token
#          zkstack server wait --ignore-prerequisites --verbose --chain consensus
#
#      - name: Set up attester committee for the consensus chain
#        run: |
#          zkstack consensus wait-for-registry --ignore-prerequisites --verbose --chain consensus
#          zkstack consensus set-attester-committee --chain consensus --ignore-prerequisites --verbose --from-genesis &> ${{ env.INTEGRATION_TESTS_LOGS_DIR }}/consensus.log
#
#      - name: Run integration tests
#        run: |
#          ./bin/run_on_all_chains.sh "zkstack dev test integration --no-deps --ignore-prerequisites" ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}
#
#      - name: Repeat integration tests on push to main to check for flakiness
#        if: ${{ (steps.condition.outputs.should_run == 'true' && github.ref == 'refs/heads/main') }}
#        run: |
#          for i in {1..10}; do
#            echo "Iteration $i"
#            mkdir -p ${{ env.INTEGRATION_TESTS_LOGS_DIR }}/$i
#            ./bin/run_on_all_chains.sh "zkstack dev test integration --no-deps --ignore-prerequisites" ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}/$i
#          done
#
#      - name: Init external nodes
#        run: |
#          GATEWAY_RPC_URL="${{ matrix.use_gateway_chain == 'WITH_GATEWAY' && '--gateway-rpc-url=http://localhost:3550' || '' }}"
#
#          zkstack external-node configs --db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --db-name=zksync_en_localhost_era_rollup --l1-rpc-url=http://localhost:8545 $GATEWAY_RPC_URL --chain era
#          zkstack external-node init --ignore-prerequisites --chain era
#
#          zkstack external-node configs --db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --db-name=zksync_en_localhost_era_validium1 --l1-rpc-url=http://localhost:8545 $GATEWAY_RPC_URL --chain validium
#          zkstack external-node init --ignore-prerequisites --chain validium
#
#          zkstack external-node configs --db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --db-name=zksync_en_localhost_era_custom_token --l1-rpc-url=http://localhost:8545 $GATEWAY_RPC_URL --chain custom_token
#          zkstack external-node init --ignore-prerequisites --chain custom_token
#
#          zkstack external-node configs --db-url=postgres://postgres:notsecurepassword@localhost:5432 \
#          --db-name=zksync_en_localhost_era_consensus --l1-rpc-url=http://localhost:8545 $GATEWAY_RPC_URL --chain consensus
#          zkstack external-node init --ignore-prerequisites --chain consensus
#
#      - name: Run recovery tests (from snapshot)
#        run: |
#          ./bin/run_on_all_chains.sh "zkstack dev test recovery --snapshot --no-deps --ignore-prerequisites --verbose" ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}
#
#      - name: Run recovery tests (from genesis)
#        run: |
#          ./bin/run_on_all_chains.sh "zkstack dev test recovery --no-deps --no-kill --ignore-prerequisites --verbose" ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}
#
#      - name: Run external nodes
#        run: |
#          zkstack external-node run --ignore-prerequisites --chain era &> ${{ env.EXTERNAL_NODE_LOGS_DIR }}/rollup.log &
#          zkstack external-node run --ignore-prerequisites --chain validium &> ${{ env.EXTERNAL_NODE_LOGS_DIR }}/validium.log &
#          zkstack external-node run --ignore-prerequisites --chain custom_token &> ${{ env.EXTERNAL_NODE_LOGS_DIR }}/custom_token.log &
#          zkstack external-node run --ignore-prerequisites --chain consensus --enable-consensus &> ${{ env.EXTERNAL_NODE_LOGS_DIR }}/consensus.log &
#
#          zkstack external-node wait --ignore-prerequisites --verbose --chain era
#          zkstack external-node wait --ignore-prerequisites --verbose --chain validium
#          zkstack external-node wait --ignore-prerequisites --verbose --chain custom_token
#          zkstack external-node wait --ignore-prerequisites --verbose --chain consensus
#
#      - name: Run integration tests en
#        run: |
#          ./bin/run_on_all_chains.sh "zkstack dev test integration --no-deps --ignore-prerequisites --external-node" ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}
#
#      - name: Repeat integration tests en on push to main to check for flakiness
#        if: ${{ (steps.condition.outputs.should_run == 'true' && github.ref == 'refs/heads/main') }}
#        run: |
#          for i in {1..10}; do
#            echo "Iteration $i"
#            mkdir -p ${{ env.INTEGRATION_TESTS_LOGS_DIR }}/$i
#            ./bin/run_on_all_chains.sh "zkstack dev test integration --no-deps --ignore-prerequisites --external-node" ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}/$i
#          done
#
#      - name: Fee projection tests
#        run: |
#          killall -INT zksync_server || true
#
#          # Only start & wait for the gateway server if use_gateway_chain == WITH_GATEWAY
#          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
#            zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
#            zkstack server wait --ignore-prerequisites --verbose --chain gateway
#          fi
#
#          # Always run the chain-specific fee tests
#          ./bin/run_on_all_chains.sh "zkstack dev test fees --no-deps --no-kill" ${{ env.CHAINS }} ${{ env.FEES_LOGS_DIR }}
#
#      - name: Repeat fee projection tests on push to main to check for flakiness
#        if: ${{ (steps.condition.outputs.should_run == 'true' && github.ref == 'refs/heads/main') }}
#        run: |
#          for i in {1..10}; do
#            echo "Iteration $i"
#            mkdir -p ${{ env.FEES_LOGS_DIR }}/$i
#            ./bin/run_on_all_chains.sh "zkstack dev test fees --no-deps --no-kill" ${{ env.CHAINS }} ${{ env.FEES_LOGS_DIR }}/$i
#          done
#
#      - name: Run revert tests
#        run: |
#          killall -INT zksync_server || true
#          killall -INT zksync_external_node || true
#
#          # Only start & wait for the gateway server if use_gateway_chain == WITH_GATEWAY
#          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
#            zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
#            zkstack server wait --ignore-prerequisites --verbose --chain gateway
#          fi
#
#          # Always run the chain-specific revert tests
#          ./bin/run_on_all_chains.sh "zkstack dev test revert --no-deps --external-node --no-kill --ignore-prerequisites" ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}
#
#      # Upgrade tests should run last, because as soon as they
#      # finish the bootloader will be different
#      # TODO make upgrade tests safe to run multiple times
#      - name: Run upgrade test
#        run: |
#          killall -INT zksync_server || true
#
#          # Only start & wait for the gateway server if use_gateway_chain == WITH_GATEWAY
#          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
#            zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
#            zkstack server wait --ignore-prerequisites --verbose --chain gateway
#          fi
#
#          # Always run the upgrade test against era
#          zkstack dev test upgrade --no-deps --chain era
#
#      - name: Upload logs
#        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
#        if: always()
#        with:
#          name: logs_${{matrix.use_gateway_chain}}
#          path: logs

  # TODO: remove unnecessary 5433 and use 5432 and basic docker compose everywhere
#  unit-tests:
#    runs-on: matterlabs-ci-runner-highmem-long
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'
#
#      - name: Build contracts
#        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize
#
#      - name: Start services
#        run: docker-compose up -d --wait reth
#
#      - name: Run unit tests
#        run: zkstack dev test rust
#
#      - name: Show sccache stats
#        run: sccache --show-stats


#  build-unit-tests:
#    runs-on: matterlabs-ci-runner-highmem-long
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'
#          zkstack_version: '' # do not install zkstack
#
#      - name: Build and archive tests
#        working-directory: core
#        run: cargo nextest archive --archive-file ${{ env.NEXTEST_ARCHIVE }}
#
#      - name: Upload test archive
#        uses: actions/upload-artifact@v4
#        with:
#          name: nextest-archive
#          path: core/${{ env.NEXTEST_ARCHIVE }}
#          retention-days: 1
#
#      - name: Show sccache stats
#        run: sccache --show-stats

#  run-unit-tests:
#    runs-on: matterlabs-ci-runner-highmem-long
#    needs: build-unit-tests
#    strategy:
#      matrix:
#        partition: [ 1, 2 ]
#      fail-fast: false
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'zkstack_cli'
#
#      - name: Build contracts
#        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize
#
#      - name: Download archive
#        uses: actions/download-artifact@v4
#        with:
#          name: nextest-archive
#          path: core
#
#      - name: Reset test db
#        working-directory: core
#        run: zkstack dev test reset-db
#
#      - name: Run tests
#        working-directory: core
#        env:
#          TEST_DATABASE_URL: "postgres://postgres:notsecurepassword@localhost:5432/zksync_local_test"
#          TEST_PROVER_DATABASE_URL: "postgres://postgres:notsecurepassword@localhost:5432/prover_local_test"
#        run: |
#          cargo nextest run --archive-file ${{ env.NEXTEST_ARCHIVE }} \
#            --partition count:${{ matrix.partition }}/2


  #  lint:
  #    runs-on: matterlabs-ci-runner-highmem-long
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v4
  #        with:
  #          submodules: "recursive"
  #          fetch-depth: '1'
  #
  #      - name: Setup runner
  #        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
  #
  #      - name: Format
  #        run: zkstack dev fmt --check
  #
  #      - name: Lint
  #        run: zkstack dev lint --check
  #
  #      - name: Show sccache stats
  #        run: sccache --show-stats
  #
  #      - name: Start postgres
  #        run: docker-compose up -d --wait postgres
  #
  #      - name: Check Database
  #        env:
  #          PROVER_URL: 'postgres://postgres:notsecurepassword@localhost:5432/zksync_local_prover'
  #          CORE_URL: 'postgres://postgres:notsecurepassword@localhost:5432/zksync_local'
  #        run: |
  #          zkstack dev db setup --prover-url=${{ env.PROVER_URL }} --core-url=${{ env.CORE_URL }}
  #          zkstack dev database check-sqlx-data --prover-url=${{ env.PROVER_URL }} --core-url=${{ env.CORE_URL }}

